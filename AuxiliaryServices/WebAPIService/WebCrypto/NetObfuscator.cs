using System;
using System.Text;

namespace WebAPIService.WebCrypto
{
    public class NetObfuscator
    {
        public static readonly byte[] GenSalt = new byte[] {
            0x1A, 0xFF, 0xB3, 0x8D, 0x45, 0xF1, 0x97, 0x23,
            0xD5, 0x67, 0xA2, 0x58, 0xBC, 0x39, 0xA7, 0xE1,
            0xC9, 0xB4, 0x3E, 0xB8, 0x04, 0xC1, 0x53, 0x6F,
            0xF9, 0x78, 0x65, 0xD1, 0x71, 0x92, 0x26, 0x40,
            0xA6, 0x9B, 0x54, 0xA4, 0x3F, 0x5E, 0x85, 0x82,
            0x29, 0x60, 0xE3, 0x8C, 0x47, 0x72, 0xD2, 0x30,
            0x7F, 0x81, 0x9D, 0x76, 0xE6, 0xDD, 0x5A, 0x1F,
            0x2B, 0x6A, 0x09, 0x4B, 0xF2, 0xBD, 0x22, 0x98,
            0x11, 0x0A, 0xD8, 0xA1, 0x19, 0xC3, 0x6B, 0x73,
            0x50, 0x4D, 0xF8, 0x74, 0xE5, 0x90, 0xF5, 0xA0,
            0xC6, 0x24, 0x7A, 0x33, 0x28, 0x5B, 0x2F, 0x35,
            0x6D, 0x49, 0xA3, 0x88, 0xC7, 0x18, 0x59, 0xD6,
            0xA9, 0x9A, 0xCF, 0xB0, 0xF6, 0xDE, 0xB7, 0x41,
            0x69, 0xEC, 0x64, 0x25, 0x84, 0x1C, 0xD9, 0x05,
            0x31, 0x83, 0x0D, 0x16, 0x70, 0x34, 0x61, 0x79,
            0x56, 0x4E, 0x62, 0x25, 0x93, 0x0B, 0x48, 0x0E,
            0xB5, 0x8A, 0x46, 0x14, 0x51, 0x9F, 0x7B, 0xAA,
            0x8B, 0x9E, 0x20, 0x10, 0xF4, 0x68, 0x5C, 0x38,
            0x3D, 0x3C, 0x2C, 0x2D, 0x37, 0x1E, 0x0C, 0xF0,
            0xD0, 0x8E, 0x57, 0x6C, 0x44, 0x12, 0x21, 0x36
        };

        public static readonly byte[] SecSalt = new byte[] {
            0x7A, 0xC3, 0x1F, 0x92, 0xE7, 0x4D, 0x5A, 0x81,
            0x33, 0xB2, 0x6E, 0x50, 0xF3, 0x14, 0x9B, 0x26,
            0x71, 0x38, 0xD4, 0x8C, 0xFA, 0x65, 0x2E, 0x97,
            0x49, 0xAD, 0x12, 0xF8, 0x5D, 0xB9, 0x6F, 0xE0,
            0x03, 0xBC, 0x78, 0x40, 0xC7, 0x54, 0x82, 0x9D,
            0xE4, 0x16, 0x7F, 0x3B, 0x21, 0x0F, 0x63, 0x98,
            0xDF, 0x34, 0x4A, 0xA2, 0x89, 0x17, 0xF1, 0x61,
            0x20, 0xCB, 0x46, 0xB5, 0x5E, 0xD2, 0x6B, 0x04,
            0x94, 0x8A, 0x2C, 0x10, 0x7C, 0x57, 0x31, 0xE5,
            0xF7, 0xAE, 0x42, 0xB0, 0x09, 0x75, 0xD6, 0x1D,
            0xEC, 0x87, 0x4F, 0x64, 0xC8, 0x95, 0x0B, 0x3A,
            0xFE, 0x55, 0x18, 0x83, 0xA9, 0x6D, 0x4C, 0xB7,
            0x90, 0x2D, 0x79, 0xC0, 0xF5, 0x22, 0x8E, 0x0A,
            0x47, 0x68, 0xE8, 0x03, 0x13, 0x52, 0xBA, 0x11,
            0x9F, 0x25, 0xC6, 0x37, 0x5B, 0xAA, 0xF9, 0xE2,
            0x60, 0xD1, 0x44, 0x1C, 0x84, 0x73, 0x3C, 0x8D,
            0xAF, 0x62, 0x20, 0x35, 0xFB, 0x4E, 0x7E, 0xCD,
            0x53, 0xD8, 0x01, 0x6C, 0x28, 0xAC, 0x41, 0x93,
            0xB8, 0x0E, 0xA1, 0x56, 0xCA, 0x3F, 0x77, 0x19,
            0xFD, 0x30, 0x1A, 0x85, 0x02, 0x58, 0x4B, 0xDC,
            0x6A, 0xF4, 0x93, 0x80, 0xC5, 0x21, 0x3D, 0xEE,
            0xAB, 0x7B, 0x48, 0xE3, 0x5C, 0xA8, 0x72, 0x1B,
            0x02, 0x69, 0xDF, 0xCF, 0x37, 0x0D, 0xC4, 0xF0,
            0x8F, 0xBD, 0x4E, 0x13, 0x6F, 0x9C, 0xA5, 0x28,
            0x1F, 0x43, 0xBB, 0xE1, 0xD7, 0x20, 0x9E, 0x74,
            0xCA, 0x5E, 0x19, 0xB4, 0x88, 0x04, 0x6B, 0xC1,
            0xF3, 0x3A, 0x80, 0x29, 0x56, 0xDE, 0x75, 0xAB,
            0x94, 0x03, 0x71, 0x9A, 0xFE, 0x2E, 0x53, 0xC6,
            0x35, 0x7D, 0xAF, 0x11, 0x82, 0x4C, 0xE9, 0xD2,
            0x0F, 0x64, 0xBC, 0x3E, 0x50, 0x95, 0xF8, 0x2C
        };

        private static byte[] XORCipher(byte[] data, byte key)
        {
            byte[] result = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                result[i] = (byte)(data[i] ^ key);
            }
            return result;
        }

        private static byte[] ShiftAndReverse(byte[] data, int shift)
        {
            byte[] result = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                result[i] = (byte)((data[i] + shift) % 256);
            }
            Array.Reverse(result);
            return result;
        }

        private static string Base64CustomEncode(byte[] data)
        {
            StringBuilder base64 = new StringBuilder(Convert.ToBase64String(data));
            for (int i = 0; i < base64.Length; i++)
            {
                base64[i] = (char)(base64[i] + 3);
            }
            return base64.ToString();
        }

        private static byte[] Base64CustomDecode(string encodedData)
        {
            StringBuilder decoded = new StringBuilder(encodedData);
            for (int i = 0; i < decoded.Length; i++)
            {
                decoded[i] = (char)(decoded[i] - 3);
            }
            return Convert.FromBase64String(decoded.ToString());
        }

        private static byte[] RandomSalt(byte[] data, byte[] salt)
        {
            byte[] result = new byte[data.Length];
            for (int i = 0; i < data.Length; i++)
            {
                result[i] = (byte)(data[i] ^ salt[i % salt.Length]);
            }
            return result;
        }

        private static byte[] ComplexXORShift(byte[] data, byte xorKey, int shift)
        {
            return ShiftAndReverse(XORCipher(data, xorKey), shift);
        }

        private static string EncryptCustom(byte[] data, byte[] salt, byte xorKey)
        {
            return Base64CustomEncode(ComplexXORShift(RandomSalt(data, salt), xorKey, 7));
        }

        private static byte[] DecryptCustom(string encodedData, byte[] salt, byte xorKey)
        {
            return XORCipher(RandomSalt(ShiftAndReverse(Base64CustomDecode(encodedData), -7), salt), xorKey);
        }

        public static string Encrypt(string plainText, byte[] salt, byte xorKey)
        {
            return EncryptCustom(Encoding.UTF8.GetBytes(plainText), salt, xorKey);
        }

        public static string Decrypt(string encryptedText, byte[] salt, byte xorKey)
        {
            return Encoding.UTF8.GetString(DecryptCustom(encryptedText, salt, xorKey));
        }
    }
}
