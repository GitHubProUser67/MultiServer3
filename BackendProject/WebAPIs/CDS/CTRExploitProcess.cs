using BackendProject.HomeTools.Crypto;
using BackendProject.MiscUtils;
using System.Text;

namespace BackendProject.WebAPIs.CDS
{
    public class CTRExploitProcess
    {
        private static readonly byte[] XMLFirst8BytesHeaderWithJunk = new byte[] { 0xEF, 0xBB, 0xBF, 0x3C, 0x3F, 0x78, 0x6D, 0x6C };
        private static readonly byte[] XMLFirst8BytesHeader = new byte[] { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65 };
        private static readonly byte[] XMLFirst8BytesSceneListTag = new byte[] { 0x3C, 0x53, 0x43, 0x45, 0x4E, 0x45, 0x4C, 0x49 };
        private static readonly byte[] BARFirst8BytesBigEndianLeanZlibHeader = new byte[] { 0xAD, 0xEF, 0x17, 0xE1, 0x01, 0x00, 0x00, 0x02 };
        private static readonly byte[] BARFirst8BytesLittleEndianLeanZlibHeader = new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x02, 0x00, 0x00, 0x01 };
        private static readonly byte[] BARFirst8BytesLittleEndianHeader = new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x00, 0x00, 0x00, 0x01 };
        private static readonly byte[] BARFirst8BytesBigEndianEquivHeader = new byte[] { 0xAD, 0xEF, 0x17, 0xE1, 0x01, 0x00, 0x00, 0x01 };
        private static readonly byte[] BARFirst8BytesLittleEndianEquivHeader = new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x01, 0x00, 0x00, 0x01 };
        private static readonly byte[] First6BytesHCDB = new byte[] { 0x73, 0x65, 0x67, 0x73, 0x01, 0x05 };
        private static readonly List<string> xmlpaterns = new() { "</SCENELIST>", "<SCENE ID=", "<SDC_VERSION>", "</xml>", "</XML>", "</odc>", "</ODC>" };

        public static byte[]? ProcessExploit(byte[] CipherTextReference, byte[] EncryptedFileBytes, int mode)
        {
            byte[]? ProcessedFileBytes = null;
            byte[]? GuessedIV = null;

            switch (mode)
            {
                case 1: // HCDB
                    ProcessedFileBytes = BruteforceHCDB(CipherTextReference, EncryptedFileBytes, First6BytesHCDB);
                    break;
                case 2: // BAR.
                    GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, BARFirst8BytesBigEndianLeanZlibHeader));
                    if (GuessedIV != null)
                        ProcessedFileBytes = CheckBARResult(EncryptedFileBytes, CipherTextReference, GuessedIV);
                    break;
                default: // XML
                    GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, XMLFirst8BytesHeaderWithJunk));
                    if (GuessedIV != null)
                    {
                        ProcessedFileBytes = CheckAndFindResult(EncryptedFileBytes, GuessedIV);
                        if (ProcessedFileBytes == null)
                        {
                            GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, XMLFirst8BytesHeader));
                            if (GuessedIV != null)
                            {
                                ProcessedFileBytes = CheckAndFindResult(EncryptedFileBytes, GuessedIV);
                                if (ProcessedFileBytes == null)
                                {
                                    GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, XMLFirst8BytesSceneListTag));
                                    if (GuessedIV != null)
                                        ProcessedFileBytes = CheckAndFindResult(EncryptedFileBytes, GuessedIV);
                                }
                            }
                        }
                    }
                    break;
            }

            return ProcessedFileBytes;
        }

        private static byte[]? BruteforceHCDB(byte[] CipherTextReference, byte[] EncryptedFileBytes, byte[] ReferencePlainTextPart)
        {
            byte[]? OutputValue = null;

            while (OutputValue == null)
            {
                for (byte value = 0; value <= 255; value++)
                {
                    for (byte value1 = 0; value1 <= 255; value1++)
                    {
                        byte[] ReferencePlainText = VariousUtils.CombineByteArray(ReferencePlainTextPart, new byte[] { value, value1 });
#if DEBUG
                        CustomLogger.LoggerAccessor.LogInfo("[CDS] - BruteforceHCDB - Current PlainText Value - {0}", VariousUtils.ByteArrayToHexString(ReferencePlainText));
#endif
                        byte[]? GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, ReferencePlainText));

                        if (GuessedIV != null)
                        {
                            byte[]? ProcessedFileBytes = CheckHCDBResult(EncryptedFileBytes, GuessedIV);

                            if (ProcessedFileBytes != null)
                                OutputValue = ProcessedFileBytes;
                        }
                    }
                }

                break;
            }

            return OutputValue;
        }

        private static byte[]? CheckAndFindResult(byte[] EncryptedFileBytes, byte[] GuessedIV)
        {
            byte[]? TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

            if (TestFileBytes != null)
            {
                foreach (string patern in xmlpaterns)
                {
                    if (Encoding.UTF8.GetString(TestFileBytes).Contains(patern))
                    {
                        CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                        CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                        return TestFileBytes;
                    }
                }
            }

            return null;
        }

        private static byte[]? CheckHCDBResult(byte[] EncryptedFileBytes, byte[] GuessedIV)
        {
            byte[]? TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

            if (TestFileBytes != null)
            {
                if (new EdgeLZMAUtils().Decompress(TestFileBytes, true, false) != null)
                {
                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                    return TestFileBytes;
                }
            }

            return null;
        }

        private static byte[]? CheckBARResult(byte[] EncryptedFileBytes, byte[] CipherTextReference, byte[]? GuessedIV)
        {
            if (GuessedIV != null)
            {
                byte[]? TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

                if (TestFileBytes != null && TestFileBytes.Length > 12 && VariousUtils.FindbyteSequence(TestFileBytes, new byte[] { 0xAD, 0xEF, 0x17, 0xE1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 }))
                {
                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                    return TestFileBytes;
                }
                else
                {
                    GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, BARFirst8BytesLittleEndianHeader));
                    if (GuessedIV != null)
                    {
                        TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

                        if (TestFileBytes != null && TestFileBytes.Length > 12 && VariousUtils.FindbyteSequence(TestFileBytes, new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 }))
                        {
                            CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                            CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                            return TestFileBytes;
                        }
                        else
                        {
                            GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, BARFirst8BytesBigEndianEquivHeader));
                            if (GuessedIV != null)
                            {
                                TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

                                if (TestFileBytes != null && TestFileBytes.Length > 12 && VariousUtils.FindbyteSequence(TestFileBytes, new byte[] { 0xAD, 0xEF, 0x17, 0xE1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 }))
                                {
                                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                                    return TestFileBytes;
                                }
                                else
                                {
                                    GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, BARFirst8BytesLittleEndianEquivHeader));
                                    if (GuessedIV != null)
                                    {
                                        TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

                                        if (TestFileBytes != null && TestFileBytes.Length > 12 && VariousUtils.FindbyteSequence(TestFileBytes, new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 }))
                                        {
                                            CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                                            CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                                            return TestFileBytes;
                                        }
                                        else
                                        {
                                            GuessedIV = new BlowfishECBEncryptDecrypt().ProcessECBBuffer(VariousUtils.XORBytes(CipherTextReference, BARFirst8BytesLittleEndianLeanZlibHeader));
                                            if (GuessedIV != null)
                                            {
                                                TestFileBytes = new BlowfishCTREncryptDecrypt().InitiateCTRBuffer(EncryptedFileBytes, GuessedIV);

                                                if (TestFileBytes != null && TestFileBytes.Length > 12 && VariousUtils.FindbyteSequence(TestFileBytes, new byte[] { 0xE1, 0x17, 0xEF, 0xAD, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 }))
                                                {
                                                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Valid File was bruteforced! - {0}", DateTime.Now.ToString());
                                                    CustomLogger.LoggerAccessor.LogInfo("[CDS] - CTRExploitProcess - Found IV - {0}", VariousUtils.ByteArrayToHexString(GuessedIV));
                                                    return TestFileBytes;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return null;
        }
    }
}
